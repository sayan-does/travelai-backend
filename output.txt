Contents of file: I:\travelai-backend\.env
HUGGING_FACE_HUB_TOKEN="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"
==================================================
Contents of file: I:\travelai-backend\.gitignore
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
venv/
env/
ENV/

# IDE
.idea/
.vscode/
*.swp
*.swo

# Environment variables
.env
.env.local

# Logs
*.log

# Local development
.DS_Store

# GCP credentials
*.json
travelai-gcp-*.json
gcp-*.json
*-gcp-*.json 

==================================================
Contents of file: I:\travelai-backend\cludbuild.yaml
steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/travel-planner-api', '.']

  # Push the image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/travel-planner-api']

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
    - 'run'
    - 'deploy'
    - 'travel-planner-api'
    - '--image'
    - 'gcr.io/$PROJECT_ID/travel-planner-api'
    - '--region'
    - 'us-central1'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
    - '--memory'
    - '4Gi'
    - '--set-env-vars'
    - 'HUGGING_FACE_HUB_TOKEN=${_HUGGING_FACE_HUB_TOKEN}'

images:
  - 'gcr.io/$PROJECT_ID/travel-planner-api'

substitutions:
  _HUGGING_FACE_HUB_TOKEN: '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' # This will be set in Cloud Build triggers
==================================================
Contents of file: I:\travelai-backend\Dockerfile
# Use a multi-stage build to reduce final image size
FROM python:3.9-slim as builder

WORKDIR /app
COPY requirements.txt .

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Add retry mechanism for pip install
RUN pip install --no-cache-dir -r requirements.txt || \
    (sleep 5 && pip install --no-cache-dir -r requirements.txt) || \
    (sleep 10 && pip install --no-cache-dir -r requirements.txt)

# Final stage
FROM python:3.9-slim
COPY --from=builder /opt/venv /opt/venv

WORKDIR /app
ENV PATH="/opt/venv/bin:$PATH"

# Install only required system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for better model downloading
ENV HF_HOME="/app/huggingface"
ENV TRANSFORMERS_CACHE="/app/huggingface/transformers"
ENV HF_HUB_ENABLE_HF_TRANSFER=1
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

# Copy application code
COPY . .

# Create cache directories
RUN mkdir -p /app/huggingface/transformers

# Set environment variables
ENV PORT=8080
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Command to run the application
CMD exec uvicorn app.main:app --host 0.0.0.0 --port ${PORT} --workers 1
==================================================
Contents of file: I:\travelai-backend\output.txt

==================================================
Contents of file: I:\travelai-backend\requirements.txt
fastapi>=0.68.0
uvicorn>=0.15.0
pydantic==2.4.2
pydantic-settings==2.0.3
python-dotenv>=0.19.0
transformers>=4.38.0
torch>=2.0.0
accelerate>=0.20.0
sentencepiece>=0.1.99
pillow>=10.0.0
huggingface-hub>=0.19.0
==================================================
Contents of file: I:\travelai-backend\script.py
import os

def create_text_from_files(directory, output_file):
    """
    Reads all files in a directory (including subdirectories) and writes their content to a single .txt file.
    
    Args:
        directory (str): The root directory to start scanning.
        output_file (str): The output file where all the file contents will be saved.
    """
    with open(output_file, 'w', encoding='utf-8') as outfile:
        for root, _, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    # Read and write content from the file
                    with open(file_path, 'r', encoding='utf-8') as infile:
                        outfile.write(f"Contents of file: {file_path}\n")
                        outfile.write(infile.read())
                        outfile.write("\n" + "="*50 + "\n")
                except Exception as e:
                    outfile.write(f"Error reading file {file_path}: {e}\n")
                    outfile.write("\n" + "="*50 + "\n")

# Customize the directory and output file name
directory_to_scan = r"I:\travelai-backend"  # Replace with the directory you want to scan
output_file_name = "output.txt"              # Replace with your desired output file name

create_text_from_files(directory_to_scan, output_file_name)

print(f"Contents of all files in '{directory_to_scan}' have been saved to '{output_file_name}'.")

==================================================
Contents of file: I:\travelai-backend\test.py
import requests

response = requests.get(
    "http://127.0.0.1:8000/",
    json={"message": "Hello, world!"}
)
print(response.json())

response = requests.post(
    "http://127.0.0.1:8000/chat",
    json={"message": "Hello, how are you?"}
)
print(response.json())
==================================================
Contents of file: I:\travelai-backend\test_end.py
import requests
from datetime import datetime, timedelta

# Base URL - Change this according to your environment
BASE_URL = "http://localhost:8080"  # Local development
# BASE_URL = "https://gen-travel-685322644106.asia-south2.run.app"  # Production

def test_health():
    """Test the health check endpoint"""
    response = requests.get(f"{BASE_URL}/health")
    print("\nHealth Check Response:", response.json())
    
def test_test_endpoint():
    """Test the test endpoint"""
    response = requests.get(f"{BASE_URL}/test")
    print("\nTest Endpoint Response:", response.json())

def test_generate_itinerary():
    """Test the generate-itinerary endpoint"""
    # Calculate dates for a week-long trip starting next year
    start_date = (datetime.now() + timedelta(days=365)).strftime("%Y-%m-%d")
    end_date = (datetime.now() + timedelta(days=371)).strftime("%Y-%m-%d")
    
    payload = {
        "destination": "Paris",
        "start_date": start_date,
        "end_date": end_date,
        "budget_level": "moderate"  # Can be "budget", "moderate", or "luxury"
    }
    
    response = requests.post(f"{BASE_URL}/generate-itinerary", json=payload)
    print("\nItinerary Generation Response:", response.json())

def test_chat():
    """Test the chat endpoint"""
    payload = {
        "message": "Can you suggest a nice place to visit in Paris?"
    }
    
    response = requests.post(f"{BASE_URL}/chat", json=payload)
    print("\nChat Response:", response.json())

def run_all_tests():
    """Run all test functions"""
    print("Starting API Tests...")
    print("=" * 50)
    
    try:
        test_health()
        test_test_endpoint()
        test_generate_itinerary()
        test_chat()
        
        print("\nAll tests completed successfully!")
        
    except requests.exceptions.RequestException as e:
        print(f"\nError occurred during testing: {str(e)}")
    except Exception as e:
        print(f"\nUnexpected error: {str(e)}")
    
    print("=" * 50)

if __name__ == "__main__":
    run_all_tests() 
==================================================
Contents of file: I:\travelai-backend\.git\COMMIT_EDITMSG
fixed docker

==================================================
Contents of file: I:\travelai-backend\.git\config
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/sayan-does/travelai-backend.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	vscode-merge-base = origin/master
	merge = refs/heads/master

==================================================
Contents of file: I:\travelai-backend\.git\description
Unnamed repository; edit this file 'description' to name the repository.

==================================================
Contents of file: I:\travelai-backend\.git\FETCH_HEAD
3982ac51723ca31916dafe146e904d1912e02b8f		branch 'master' of https://github.com/sayan-does/travelai-backend

==================================================
Contents of file: I:\travelai-backend\.git\HEAD
ref: refs/heads/master

==================================================
Contents of file: I:\travelai-backend\.git\index
Error reading file I:\travelai-backend\.git\index: 'utf-8' codec can't decode byte 0x91 in position 13: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\packed-refs
# pack-refs with: peeled fully-peeled sorted 
c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 refs/remotes/origin/master

==================================================
Contents of file: I:\travelai-backend\.git\hooks\applypatch-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

==================================================
Contents of file: I:\travelai-backend\.git\hooks\commit-msg.sample
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

==================================================
Contents of file: I:\travelai-backend\.git\hooks\fsmonitor-watchman.sample
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

==================================================
Contents of file: I:\travelai-backend\.git\hooks\post-update.sample
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

==================================================
Contents of file: I:\travelai-backend\.git\hooks\pre-applypatch.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

==================================================
Contents of file: I:\travelai-backend\.git\hooks\pre-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

==================================================
Contents of file: I:\travelai-backend\.git\hooks\pre-merge-commit.sample
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

==================================================
Contents of file: I:\travelai-backend\.git\hooks\pre-push.sample
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

==================================================
Contents of file: I:\travelai-backend\.git\hooks\pre-rebase.sample
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

==================================================
Contents of file: I:\travelai-backend\.git\hooks\pre-receive.sample
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

==================================================
Contents of file: I:\travelai-backend\.git\hooks\prepare-commit-msg.sample
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

==================================================
Contents of file: I:\travelai-backend\.git\hooks\push-to-checkout.sample
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

==================================================
Contents of file: I:\travelai-backend\.git\hooks\sendemail-validate.sample
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

==================================================
Contents of file: I:\travelai-backend\.git\hooks\update.sample
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

==================================================
Contents of file: I:\travelai-backend\.git\info\exclude
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

==================================================
Contents of file: I:\travelai-backend\.git\logs\HEAD
0000000000000000000000000000000000000000 c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737561793 +0530	clone: from https://github.com/sayan-does/travelai-backend.git
c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 a8048cb427e056d136df38e99e44b4ed16bff820 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737567942 +0530	commit: first commit
a8048cb427e056d136df38e99e44b4ed16bff820 b0cef7a3741ca913878605915d31d49b8659a7c3 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569024 +0530	commit: first commit
b0cef7a3741ca913878605915d31d49b8659a7c3 5da966fd399b7cc7ae319892dcbd6958205189de ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569505 +0530	commit: fixed env
5da966fd399b7cc7ae319892dcbd6958205189de 35109ef59df2adf692526dc37d7a467b19d0a1e2 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569751 +0530	commit: fixed env
35109ef59df2adf692526dc37d7a467b19d0a1e2 3982ac51723ca31916dafe146e904d1912e02b8f ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737573129 +0530	commit: fixed docker

==================================================
Contents of file: I:\travelai-backend\.git\logs\refs\heads\master
0000000000000000000000000000000000000000 c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737561793 +0530	clone: from https://github.com/sayan-does/travelai-backend.git
c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 a8048cb427e056d136df38e99e44b4ed16bff820 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737567942 +0530	commit: first commit
a8048cb427e056d136df38e99e44b4ed16bff820 b0cef7a3741ca913878605915d31d49b8659a7c3 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569024 +0530	commit: first commit
b0cef7a3741ca913878605915d31d49b8659a7c3 5da966fd399b7cc7ae319892dcbd6958205189de ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569505 +0530	commit: fixed env
5da966fd399b7cc7ae319892dcbd6958205189de 35109ef59df2adf692526dc37d7a467b19d0a1e2 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569751 +0530	commit: fixed env
35109ef59df2adf692526dc37d7a467b19d0a1e2 3982ac51723ca31916dafe146e904d1912e02b8f ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737573129 +0530	commit: fixed docker

==================================================
Contents of file: I:\travelai-backend\.git\logs\refs\remotes\origin\HEAD
0000000000000000000000000000000000000000 c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737561793 +0530	clone: from https://github.com/sayan-does/travelai-backend.git

==================================================
Contents of file: I:\travelai-backend\.git\logs\refs\remotes\origin\master
c37f9d9e9cdb0d41e0c7eb521c4f93fa12adf379 a8048cb427e056d136df38e99e44b4ed16bff820 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737568053 +0530	update by push
a8048cb427e056d136df38e99e44b4ed16bff820 b0cef7a3741ca913878605915d31d49b8659a7c3 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569029 +0530	update by push
b0cef7a3741ca913878605915d31d49b8659a7c3 5da966fd399b7cc7ae319892dcbd6958205189de ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569512 +0530	update by push
5da966fd399b7cc7ae319892dcbd6958205189de 35109ef59df2adf692526dc37d7a467b19d0a1e2 ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737569878 +0530	update by push
35109ef59df2adf692526dc37d7a467b19d0a1e2 3982ac51723ca31916dafe146e904d1912e02b8f ICE_InDa_MIXER <104935198+sayan-does@users.noreply.github.com> 1737573141 +0530	update by push

==================================================
Contents of file: I:\travelai-backend\.git\objects\00\7af26b23d928d6d186b664e458a1e2339f0a01
Error reading file I:\travelai-backend\.git\objects\00\7af26b23d928d6d186b664e458a1e2339f0a01: 'utf-8' codec can't decode byte 0x8d in position 3: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\0b\7f9b6e5b2e269e034a30717183589bc10d7534
Error reading file I:\travelai-backend\.git\objects\0b\7f9b6e5b2e269e034a30717183589bc10d7534: 'utf-8' codec can't decode byte 0xb5 in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\14\e83a1e5ca7cec2de290ebca9f36fb2b0a50127
Error reading file I:\travelai-backend\.git\objects\14\e83a1e5ca7cec2de290ebca9f36fb2b0a50127: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\24\e3a0ffa0e7e938a8099c42b21efdc25d75ce0c
Error reading file I:\travelai-backend\.git\objects\24\e3a0ffa0e7e938a8099c42b21efdc25d75ce0c: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\32\d472c0c151249ad460443bf6f377a68b2cdf81
Error reading file I:\travelai-backend\.git\objects\32\d472c0c151249ad460443bf6f377a68b2cdf81: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\35\109ef59df2adf692526dc37d7a467b19d0a1e2
Error reading file I:\travelai-backend\.git\objects\35\109ef59df2adf692526dc37d7a467b19d0a1e2: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\39\82ac51723ca31916dafe146e904d1912e02b8f
Error reading file I:\travelai-backend\.git\objects\39\82ac51723ca31916dafe146e904d1912e02b8f: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\5d\a966fd399b7cc7ae319892dcbd6958205189de
Error reading file I:\travelai-backend\.git\objects\5d\a966fd399b7cc7ae319892dcbd6958205189de: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\60\ea599f38d776a2a1fbfcfd386ee8c1c06165ce
Error reading file I:\travelai-backend\.git\objects\60\ea599f38d776a2a1fbfcfd386ee8c1c06165ce: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\68\f77b705e829317a930ba34c737a338891a987e
Error reading file I:\travelai-backend\.git\objects\68\f77b705e829317a930ba34c737a338891a987e: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\6f\da196c643b223e8b2195412ac24af2f886c092
Error reading file I:\travelai-backend\.git\objects\6f\da196c643b223e8b2195412ac24af2f886c092: 'utf-8' codec can't decode byte 0xb0 in position 7: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\70\dbb1cf4bbb25e4242798cde974f3eb24e1b32c
Error reading file I:\travelai-backend\.git\objects\70\dbb1cf4bbb25e4242798cde974f3eb24e1b32c: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\76\4e3309b66f28348145e06e6b9272e94177e809
Error reading file I:\travelai-backend\.git\objects\76\4e3309b66f28348145e06e6b9272e94177e809: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\7e\d670546cccb9bc4a239e44bc386f7affe0d2fd
Error reading file I:\travelai-backend\.git\objects\7e\d670546cccb9bc4a239e44bc386f7affe0d2fd: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\8b\76c45069d520713f00bf69f10f97f53de97dd1
Error reading file I:\travelai-backend\.git\objects\8b\76c45069d520713f00bf69f10f97f53de97dd1: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\9d\528142dcc81c264ce64cf04fb5c31843fd4f25
Error reading file I:\travelai-backend\.git\objects\9d\528142dcc81c264ce64cf04fb5c31843fd4f25: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\a8\048cb427e056d136df38e99e44b4ed16bff820
Error reading file I:\travelai-backend\.git\objects\a8\048cb427e056d136df38e99e44b4ed16bff820: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\a8\ae88a8625f6006b8cd4544cc167a1612d5e394
Error reading file I:\travelai-backend\.git\objects\a8\ae88a8625f6006b8cd4544cc167a1612d5e394: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\b0\cef7a3741ca913878605915d31d49b8659a7c3
Error reading file I:\travelai-backend\.git\objects\b0\cef7a3741ca913878605915d31d49b8659a7c3: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\b3\a2e509e55a9695e8b6f7ea757b56317623eb49
Error reading file I:\travelai-backend\.git\objects\b3\a2e509e55a9695e8b6f7ea757b56317623eb49: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\b8\f5535fb4fcd404ba84a6d9870cc6bc9adea099
Error reading file I:\travelai-backend\.git\objects\b8\f5535fb4fcd404ba84a6d9870cc6bc9adea099: 'utf-8' codec can't decode byte 0xb4 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\bf\6855ffeefd42444db4aae3d840871684fd6ef4
Error reading file I:\travelai-backend\.git\objects\bf\6855ffeefd42444db4aae3d840871684fd6ef4: 'utf-8' codec can't decode byte 0xe5 in position 2: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\d2\9fa56f64e16b2b87bde35efb4b575a4a5a8f82
Error reading file I:\travelai-backend\.git\objects\d2\9fa56f64e16b2b87bde35efb4b575a4a5a8f82: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\e1\8352a68873f4f02ed5bb3c1964719b14ff798f
Error reading file I:\travelai-backend\.git\objects\e1\8352a68873f4f02ed5bb3c1964719b14ff798f: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\ed\94d2f2fc4f05cf2904a83c89c1631cce9e71ad
Error reading file I:\travelai-backend\.git\objects\ed\94d2f2fc4f05cf2904a83c89c1631cce9e71ad: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\f1\4045564e8a032db00c22eb8b81178b352c7405
Error reading file I:\travelai-backend\.git\objects\f1\4045564e8a032db00c22eb8b81178b352c7405: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\f7\2e1b33de3417b573a7ba2ae6a2bc4306d9c285
Error reading file I:\travelai-backend\.git\objects\f7\2e1b33de3417b573a7ba2ae6a2bc4306d9c285: 'utf-8' codec can't decode byte 0xc3 in position 6: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\f9\376aed731340af18a0a2dc3dc999b7a19ec3a4
Error reading file I:\travelai-backend\.git\objects\f9\376aed731340af18a0a2dc3dc999b7a19ec3a4: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\pack\pack-c7bd8f05ed3b301d6e528425f5bbbcf910328ddc.idx
Error reading file I:\travelai-backend\.git\objects\pack\pack-c7bd8f05ed3b301d6e528425f5bbbcf910328ddc.idx: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\pack\pack-c7bd8f05ed3b301d6e528425f5bbbcf910328ddc.pack
Error reading file I:\travelai-backend\.git\objects\pack\pack-c7bd8f05ed3b301d6e528425f5bbbcf910328ddc.pack: 'utf-8' codec can't decode byte 0x94 in position 12: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\objects\pack\pack-c7bd8f05ed3b301d6e528425f5bbbcf910328ddc.rev
Error reading file I:\travelai-backend\.git\objects\pack\pack-c7bd8f05ed3b301d6e528425f5bbbcf910328ddc.rev: 'utf-8' codec can't decode byte 0x8f in position 78: invalid start byte

==================================================
Contents of file: I:\travelai-backend\.git\refs\heads\master
3982ac51723ca31916dafe146e904d1912e02b8f

==================================================
Contents of file: I:\travelai-backend\.git\refs\remotes\origin\HEAD
ref: refs/remotes/origin/master

==================================================
Contents of file: I:\travelai-backend\.git\refs\remotes\origin\master
3982ac51723ca31916dafe146e904d1912e02b8f

==================================================
Contents of file: I:\travelai-backend\app\config.py
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    APP_NAME: str = "Travel Planner API"
    DEBUG_MODE: bool = False
    API_VERSION: str = "1.0.0"
    MODEL_NAME: str = "Qwen/Qwen2-VL-2B-Instruct"
    HUGGING_FACE_HUB_TOKEN: str = ""

    class Config:
        env_file = ".env"
        env_file_encoding = 'utf-8'


settings = Settings()

==================================================
Contents of file: I:\travelai-backend\app\main.py
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.middleware.gzip import GZipMiddleware
import time
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.requests import Request
from pydantic import BaseModel
from datetime import date, timedelta
from typing import Optional, List
from enum import Enum
import logging
import os
from .config import settings
from .services.llm_service import LLMService

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title=settings.APP_NAME, version=settings.API_VERSION)

class RequestLoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        start_time = time.time()
        response = await call_next(request)
        process_time = time.time() - start_time
        logger.info(f"Path: {request.url.path} Method: {request.method} Time: {process_time:.2f}s Status: {response.status_code}")
        return response

# Add the middlewares
app.add_middleware(GZipMiddleware, minimum_size=1000)
app.add_middleware(RequestLoggingMiddleware)

# Get frontend URLs from environment variable or use defaults
frontend_urls = os.getenv('CORS_ORIGINS', 'https://travel-ai-frontend-877104202725.us-central1.run.app')
allowed_origins = [url.strip() for url in frontend_urls.split(',')]
allowed_origins.extend([
    "http://localhost:5173",  # Vite default
    "http://localhost:3000"  # Next.js default
])

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
    max_age=3600,
)

@app.options("/{path:path}")
async def options_handler(path: str):
    return JSONResponse(
        content={"status": "OK"},
        headers={
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
            "Access-Control-Allow-Headers": "*",
        }
    )

# Initialize LLM service
llm_service = LLMService()

# Models


class BudgetLevel(str, Enum):
    BUDGET = "budget"
    MODERATE = "moderate"
    LUXURY = "luxury"


class TripRequest(BaseModel):
    destination: str
    start_date: date
    end_date: date
    budget_level: BudgetLevel


class Activity(BaseModel):
    title: str
    description: str
    time: str
    cost_estimate: float


class DayPlan(BaseModel):
    date: date
    activities: List[Activity]


class TripItinerary(BaseModel):
    destination: str
    start_date: date
    end_date: date
    budget_level: BudgetLevel
    daily_plans: List[DayPlan]
    total_cost_estimate: float


class ChatMessage(BaseModel):
    message: str


class ChatResponse(BaseModel):
    response: str

# Endpoints


@app.get("/")
async def health_check():
    return {"status": "healthy"}


@app.get("/test")
async def test_endpoint():
    return {
        "status": "success",
        "message": "API is working!",
        "config": {
            "app_name": settings.APP_NAME,
            "version": settings.API_VERSION
        }
    }


@app.post("/generate-itinerary", response_model=TripItinerary)
async def generate_itinerary(trip_request: TripRequest):
    try:
        logger.info(f"Generating itinerary for {trip_request.destination}")

        # Generate itinerary using LLM
        daily_activities = await llm_service.generate_itinerary(
            trip_request.destination,
            trip_request.start_date,
            trip_request.end_date,
            trip_request.budget_level
        )

        # Convert the activities into DayPlan objects
        daily_plans = []
        current_date = trip_request.start_date

        for day_activities in daily_activities:
            activities = [
                Activity(**activity) for activity in day_activities
            ]

            daily_plans.append(DayPlan(
                date=current_date,
                activities=activities
            ))
            current_date += timedelta(days=1)

        # Calculate total cost
        total_cost = sum(
            activity.cost_estimate
            for day in daily_plans
            for activity in day.activities
        )

        return TripItinerary(
            destination=trip_request.destination,
            start_date=trip_request.start_date,
            end_date=trip_request.end_date,
            budget_level=trip_request.budget_level,
            daily_plans=daily_plans,
            total_cost_estimate=total_cost
        )
    except Exception as e:
        logger.error(f"Error generating itinerary: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/chat", response_model=ChatResponse)
async def chat(message: ChatMessage):
    try:
        logger.info(f"Received chat message: {message.message}")
        
        response = await llm_service.generate_chat_response(message.message)
        
        return ChatResponse(response=response)
    except Exception as e:
        logger.error(f"Error in chat endpoint: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

==================================================
Contents of file: I:\travelai-backend\app\test.py
import requests

# Test generate-itinerary endpoint
url_itinerary = "https://gen-travel-685322644106.asia-south2.run.app/generate-itinerary"
payload_itinerary = {
    "destination": "Paris",
    "start_date": "2025-05-01",
    "end_date": "2025-05-07",
    "budget_level": "medium"
}
response_itinerary = requests.post(url_itinerary, json=payload_itinerary)
print("Itinerary Response:", response_itinerary.json())

==================================================
Contents of file: I:\travelai-backend\app\travel-ai.code-workspace
{
	"folders": [
		{
			"path": "../.."
		}
	],
	"settings": {}
}
==================================================
Contents of file: I:\travelai-backend\app\__init__.py

==================================================
Contents of file: I:\travelai-backend\app\services\llm_service.py
import logging
from ..config import settings
import torch
from transformers import AutoTokenizer, AutoModelForVision2Seq
import os

logger = logging.getLogger(__name__)

class LLMService:
    def __init__(self):
        logger.info(f"Initializing LLM Service with model: {settings.MODEL_NAME}")
        self.model_name = settings.MODEL_NAME
        
        # Set Hugging Face token from settings
        os.environ["HUGGING_FACE_HUB_TOKEN"] = settings.HUGGING_FACE_HUB_TOKEN
        if not settings.HUGGING_FACE_HUB_TOKEN:
            logger.warning("HUGGING_FACE_HUB_TOKEN not set in settings")
        
        # Initialize the model and tokenizer with retry and resume capability
        self.tokenizer = AutoTokenizer.from_pretrained(
            settings.MODEL_NAME,
            trust_remote_code=True,
            use_auth_token=settings.HUGGING_FACE_HUB_TOKEN,  # Add auth token
            resume_download=True  # Enable resume capability
        )
        self.model = AutoModelForVision2Seq.from_pretrained(
            settings.MODEL_NAME,
            device_map="auto" if torch.cuda.is_available() else "cpu",
            trust_remote_code=True,
            low_cpu_mem_usage=True,
            use_auth_token=settings.HUGGING_FACE_HUB_TOKEN,  # Add auth token
            resume_download=True,  # Enable resume capability
            offload_folder="offload"  # Add offload folder for large models
        ).eval()
        
        # System prompt optimized for Qwen2-VL-2B-Instruct
        self.system_prompt = """You are an expert AI travel assistant. Your role is to:
1. Create detailed, personalized travel itineraries
2. Provide accurate local information and recommendations
3. Consider budget constraints and preferences
4. Give practical travel tips and cultural insights
5. Maintain a friendly, professional tone

When generating itineraries:
- Include specific times for activities
- Provide realistic cost estimates in USD
- Consider local operating hours and seasonal factors
- Balance tourist attractions with local experiences
- Account for travel time between locations

-Important
 .Give response in  a table format with location, time, cost, and description.
 .The response should be under 500 words.

Keep responses clear, concise, and well-structured."""

        logger.info("LLM Service initialized successfully")

    def _create_prompt(self, user_input: str, context: str = "") -> str:
        """Create a complete prompt with system context and user input"""
        return f"{self.system_prompt}\n\nContext: {context}\n\nUser: {user_input}\n\nAssistant:"

    async def generate_itinerary(self, destination, start_date, end_date, budget_level):
        try:
            logger.info(f"Generating itinerary for {destination}")
            
            # Create the itinerary prompt
            prompt = self._create_prompt(
                f"Create a travel itinerary for {destination} from {start_date} to {end_date} with a {budget_level} budget.",
                f"Destination: {destination}\nDates: {start_date} to {end_date}\nBudget: {budget_level}"
            )
            
            inputs = self.tokenizer(prompt, return_tensors="pt").to(self.model.device)
            
            with torch.no_grad():
                outputs = self.model.generate(
                    **inputs,
                    max_new_tokens=1024,
                    temperature=0.7,
                    top_p=0.9,
                    repetition_penalty=1.1
                )
            
            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            return self._parse_response(response)
            
        except Exception as e:
            logger.error(f"Error in generate_itinerary: {str(e)}")
            raise

    def _parse_response(self, response):
        try:
            from ..utils.text_parser import extract_time, extract_cost
            
            # Remove the prompt and system message from the response
            itinerary_text = response.split("Assistant:")[-1].strip()
            
            # Split into days
            days = itinerary_text.split("Day")
            parsed_days = []
            
            for day in days[1:]:  # Skip the first empty split
                activities = []
                day_content = day.strip()
                
                # Split into activities
                activity_lines = [line.strip() 
                                for line in day_content.split('\n') 
                                if line.strip()]
                
                current_activity = None
                for line in activity_lines[1:]:  # Skip the "X:" line
                    if line.startswith('-'):
                        # New activity
                        if current_activity:
                            activities.append(current_activity)
                        
                        activity_text = line[1:].strip()
                        current_activity = {
                            "title": activity_text.split('-')[0].strip(),
                            "description": "",
                            "time": extract_time(activity_text),
                            "cost_estimate": extract_cost(activity_text)
                        }
                    elif current_activity:
                        # Description line
                        current_activity["description"] += line + " "
                
                if current_activity:
                    activities.append(current_activity)
                
                if activities:
                    parsed_days.append(activities)
            
            return parsed_days
            
        except Exception as e:
            logger.error(f"Error parsing LLM response: {str(e)}")
            raise

    async def generate_chat_response(self, message: str):
        try:
            logger.info("Generating chat response")
            
            # Create the chat prompt
            prompt = self._create_prompt(
                message,
                "Previous conversation: None"  # You could add conversation history here
            )
            
            inputs = self.tokenizer(prompt, return_tensors="pt").to(self.model.device)
            
            with torch.no_grad():
                outputs = self.model.generate(
                    **inputs,
                    max_new_tokens=512,
                    temperature=0.7,
                    top_p=0.9,
                    repetition_penalty=1.1
                )
            
            response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            # Remove the system prompt and user message from the response
            response = response.split("Assistant:")[-1].strip()
            return response
                
        except Exception as e:
            logger.error(f"Error generating chat response: {str(e)}")
            raise
==================================================
Contents of file: I:\travelai-backend\app\services\__init__.py

==================================================
Contents of file: I:\travelai-backend\app\services\__pycache__\llm_service.cpython-310.pyc
Error reading file I:\travelai-backend\app\services\__pycache__\llm_service.cpython-310.pyc: 'utf-8' codec can't decode byte 0xd0 in position 8: invalid continuation byte

==================================================
Contents of file: I:\travelai-backend\app\services\__pycache__\__init__.cpython-310.pyc
Error reading file I:\travelai-backend\app\services\__pycache__\__init__.cpython-310.pyc: 'utf-8' codec can't decode byte 0xc1 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\app\utils\text_parser.py
import re
from datetime import datetime


def extract_time(text: str) -> str:
    """Extract time from text using regex."""
    time_pattern = r'\b(?:1[0-2]|0?[1-9])(?::[0-5][0-9])?\s*(?:AM|PM|am|pm)\b'
    match = re.search(time_pattern, text)
    return match.group(0) if match else "09:00 AM"


def extract_cost(text: str) -> float:
    """Extract cost from text using regex."""
    cost_pattern = r'\$\s*(\d+(?:\.\d{2})?)'
    match = re.search(cost_pattern, text)
    return float(match.group(1)) if match else 0.0

==================================================
Contents of file: I:\travelai-backend\app\utils\__init__.py

==================================================
Contents of file: I:\travelai-backend\app\utils\__pycache__\text_parser.cpython-310.pyc
Error reading file I:\travelai-backend\app\utils\__pycache__\text_parser.cpython-310.pyc: 'utf-8' codec can't decode byte 0xc1 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\app\utils\__pycache__\__init__.cpython-310.pyc
Error reading file I:\travelai-backend\app\utils\__pycache__\__init__.cpython-310.pyc: 'utf-8' codec can't decode byte 0xc1 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\app\__pycache__\config.cpython-310.pyc
Error reading file I:\travelai-backend\app\__pycache__\config.cpython-310.pyc: 'utf-8' codec can't decode byte 0xc1 in position 8: invalid start byte

==================================================
Contents of file: I:\travelai-backend\app\__pycache__\main.cpython-310.pyc
Error reading file I:\travelai-backend\app\__pycache__\main.cpython-310.pyc: 'utf-8' codec can't decode byte 0x92 in position 10: invalid start byte

==================================================
Contents of file: I:\travelai-backend\app\__pycache__\__init__.cpython-310.pyc
Error reading file I:\travelai-backend\app\__pycache__\__init__.cpython-310.pyc: 'utf-8' codec can't decode byte 0xc1 in position 8: invalid start byte

==================================================
